
#ifndef _EXPLOIT_H_
#define _EXPLOIT_H_

// the exploit is capable to modify RO segment
#define EXPLOIT_POKE_TEXT 1
// the exploit writes more than we want, so even it's capable to modify RO segment, it's not safe
#define EXPLOIT_POKE_WITH_GARBAGE 2
// the exploit cannot mmap kernel in a /dev/mem way
#define EXPLOIT_MMAP_ABNORMAL 4

struct st_exploit {
    const char *name;
    int flags;
    int (*invoke)(void *, long addr);
    // maps kernel memory, addr is PA
    void *(*mmap)(void *, long addr, long size);
    // read/write virtual memory
    int (*read32)(void *, long addr, long *val);
    int (*write32)(void *, long addr, long val);
    void *opaque;
    int (*init)(void **);
    void (*free)(void **);
};

typedef struct st_exploit exploit_t;

void exploit_init(exploit_t **);
void exploit_free(exploit_t **);
int exploit_generic_mmap(int fd, long addr, long size, void **mmaped);

#endif

